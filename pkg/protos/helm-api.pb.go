// Copyright 2020 weapons97@gmail.com
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.3
// source: helm-api.proto

package helmapi

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Entry 提供 chart repository 信息
type Entry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Url                   string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Username              string `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	Password              string `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	CertFile              string `protobuf:"bytes,5,opt,name=certFile,proto3" json:"certFile,omitempty"`
	KeyFile               string `protobuf:"bytes,6,opt,name=keyFile,proto3" json:"keyFile,omitempty"`
	CaFile                string `protobuf:"bytes,7,opt,name=caFile,proto3" json:"caFile,omitempty"`
	InsecureSkipTlsVerify bool   `protobuf:"varint,8,opt,name=insecure_skip_tls_verify,json=insecureSkipTlsVerify,proto3" json:"insecure_skip_tls_verify,omitempty"`
}

func (x *Entry) Reset() {
	*x = Entry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_helm_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Entry) ProtoMessage() {}

func (x *Entry) ProtoReflect() protoreflect.Message {
	mi := &file_helm_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Entry.ProtoReflect.Descriptor instead.
func (*Entry) Descriptor() ([]byte, []int) {
	return file_helm_api_proto_rawDescGZIP(), []int{0}
}

func (x *Entry) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Entry) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Entry) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Entry) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Entry) GetCertFile() string {
	if x != nil {
		return x.CertFile
	}
	return ""
}

func (x *Entry) GetKeyFile() string {
	if x != nil {
		return x.KeyFile
	}
	return ""
}

func (x *Entry) GetCaFile() string {
	if x != nil {
		return x.CaFile
	}
	return ""
}

func (x *Entry) GetInsecureSkipTlsVerify() bool {
	if x != nil {
		return x.InsecureSkipTlsVerify
	}
	return false
}

// HelmContextReq
type HelmContextReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name 唯一的context 标识。冲突则会覆盖。
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// KubeInfo 提供。
	Kubeinfo *KubeInfo `protobuf:"bytes,2,opt,name=kubeinfo,proto3" json:"kubeinfo,omitempty"`
	// RepoInfo 提供 chart repository 相关信息。
	Repoinfo *RepoInfo `protobuf:"bytes,3,opt,name=repoinfo,proto3" json:"repoinfo,omitempty"`
	// incluster 为true 时，会用sa 为helm-api 提供k8s的访问权限。
	Incluster bool `protobuf:"varint,6,opt,name=incluster,proto3" json:"incluster,omitempty"`
	// expiry 是超时的时间戳，超过此值，context会被回收。
	Expiry int64 `protobuf:"varint,7,opt,name=expiry,proto3" json:"expiry,omitempty"`
}

func (x *HelmContextReq) Reset() {
	*x = HelmContextReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_helm_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelmContextReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelmContextReq) ProtoMessage() {}

func (x *HelmContextReq) ProtoReflect() protoreflect.Message {
	mi := &file_helm_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelmContextReq.ProtoReflect.Descriptor instead.
func (*HelmContextReq) Descriptor() ([]byte, []int) {
	return file_helm_api_proto_rawDescGZIP(), []int{1}
}

func (x *HelmContextReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HelmContextReq) GetKubeinfo() *KubeInfo {
	if x != nil {
		return x.Kubeinfo
	}
	return nil
}

func (x *HelmContextReq) GetRepoinfo() *RepoInfo {
	if x != nil {
		return x.Repoinfo
	}
	return nil
}

func (x *HelmContextReq) GetIncluster() bool {
	if x != nil {
		return x.Incluster
	}
	return false
}

func (x *HelmContextReq) GetExpiry() int64 {
	if x != nil {
		return x.Expiry
	}
	return 0
}

type KubeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// kubeconfig kubeconfig 的内容，你可以在~/.kube.config下找到它。
	Kubeconfig string `protobuf:"bytes,3,opt,name=kubeconfig,proto3" json:"kubeconfig,omitempty"`
	// context 指定kubeconfig中哪个context被使用。
	Context string `protobuf:"bytes,4,opt,name=context,proto3" json:"context,omitempty"`
	// namespace 指定使用的工作空间。
	Namespace string `protobuf:"bytes,5,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *KubeInfo) Reset() {
	*x = KubeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_helm_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubeInfo) ProtoMessage() {}

func (x *KubeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_helm_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubeInfo.ProtoReflect.Descriptor instead.
func (*KubeInfo) Descriptor() ([]byte, []int) {
	return file_helm_api_proto_rawDescGZIP(), []int{2}
}

func (x *KubeInfo) GetKubeconfig() string {
	if x != nil {
		return x.Kubeconfig
	}
	return ""
}

func (x *KubeInfo) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

func (x *KubeInfo) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type RepoInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// entrys 提供 一组 chart repository 信息
	Entrys []*Entry `protobuf:"bytes,2,rep,name=entrys,proto3" json:"entrys,omitempty"`
}

func (x *RepoInfo) Reset() {
	*x = RepoInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_helm_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepoInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepoInfo) ProtoMessage() {}

func (x *RepoInfo) ProtoReflect() protoreflect.Message {
	mi := &file_helm_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepoInfo.ProtoReflect.Descriptor instead.
func (*RepoInfo) Descriptor() ([]byte, []int) {
	return file_helm_api_proto_rawDescGZIP(), []int{3}
}

func (x *RepoInfo) GetEntrys() []*Entry {
	if x != nil {
		return x.Entrys
	}
	return nil
}

// DeleteHelmContextReq
type DeleteHelmContextReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name 唯一的context 标识。
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteHelmContextReq) Reset() {
	*x = DeleteHelmContextReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_helm_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteHelmContextReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteHelmContextReq) ProtoMessage() {}

func (x *DeleteHelmContextReq) ProtoReflect() protoreflect.Message {
	mi := &file_helm_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteHelmContextReq.ProtoReflect.Descriptor instead.
func (*DeleteHelmContextReq) Descriptor() ([]byte, []int) {
	return file_helm_api_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteHelmContextReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type UpdateRepoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// contextName 唯一的context 标识。
	ContextName string    `protobuf:"bytes,1,opt,name=contextName,proto3" json:"contextName,omitempty"`
	Repoinfo    *RepoInfo `protobuf:"bytes,2,opt,name=repoinfo,proto3" json:"repoinfo,omitempty"`
}

func (x *UpdateRepoReq) Reset() {
	*x = UpdateRepoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_helm_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRepoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRepoReq) ProtoMessage() {}

func (x *UpdateRepoReq) ProtoReflect() protoreflect.Message {
	mi := &file_helm_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRepoReq.ProtoReflect.Descriptor instead.
func (*UpdateRepoReq) Descriptor() ([]byte, []int) {
	return file_helm_api_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateRepoReq) GetContextName() string {
	if x != nil {
		return x.ContextName
	}
	return ""
}

func (x *UpdateRepoReq) GetRepoinfo() *RepoInfo {
	if x != nil {
		return x.Repoinfo
	}
	return nil
}

// HelmContextRes
type HelmContextRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *HelmContextRes) Reset() {
	*x = HelmContextRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_helm_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelmContextRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelmContextRes) ProtoMessage() {}

func (x *HelmContextRes) ProtoReflect() protoreflect.Message {
	mi := &file_helm_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelmContextRes.ProtoReflect.Descriptor instead.
func (*HelmContextRes) Descriptor() ([]byte, []int) {
	return file_helm_api_proto_rawDescGZIP(), []int{6}
}

func (x *HelmContextRes) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// InstallReq 安装chart的请求
type InstallReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// contextName 唯一的context 标识。（可选）
	ContextName   string `protobuf:"bytes,1,opt,name=contextName,proto3" json:"contextName,omitempty"`
	RepoChartName string `protobuf:"bytes,2,opt,name=repoChartName,proto3" json:"repoChartName,omitempty"`
	// chartVersion 为空会使用最新版本（可选）
	ChartVersion string `protobuf:"bytes,3,opt,name=chartVersion,proto3" json:"chartVersion,omitempty"`
	// namespace 为空会使用context 默认的空间 （可选）
	Namespace string `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// values 是yaml格式的value文件的内容。（可选）
	Values      string `protobuf:"bytes,6,opt,name=values,proto3" json:"values,omitempty"`
	ReleaseName string `protobuf:"bytes,7,opt,name=releaseName,proto3" json:"releaseName,omitempty"`
	// dry_run 为true 不会真实的部署release。
	DryRun bool `protobuf:"varint,9,opt,name=dry_run,json=dryRun,proto3" json:"dry_run,omitempty"`
	// KubeInfo 如果没有contextName，但是有KubeInfo和RepoInfo会创建一个临时的context。
	Kubeinfo *KubeInfo `protobuf:"bytes,12,opt,name=kubeinfo,proto3" json:"kubeinfo,omitempty"`
	// RepoInfo 如果没有contextName，但是有KubeInfo和RepoInfo会创建一个临时的context。
	Repoinfo *RepoInfo `protobuf:"bytes,13,opt,name=repoinfo,proto3" json:"repoinfo,omitempty"`
}

func (x *InstallReq) Reset() {
	*x = InstallReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_helm_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstallReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstallReq) ProtoMessage() {}

func (x *InstallReq) ProtoReflect() protoreflect.Message {
	mi := &file_helm_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstallReq.ProtoReflect.Descriptor instead.
func (*InstallReq) Descriptor() ([]byte, []int) {
	return file_helm_api_proto_rawDescGZIP(), []int{7}
}

func (x *InstallReq) GetContextName() string {
	if x != nil {
		return x.ContextName
	}
	return ""
}

func (x *InstallReq) GetRepoChartName() string {
	if x != nil {
		return x.RepoChartName
	}
	return ""
}

func (x *InstallReq) GetChartVersion() string {
	if x != nil {
		return x.ChartVersion
	}
	return ""
}

func (x *InstallReq) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *InstallReq) GetValues() string {
	if x != nil {
		return x.Values
	}
	return ""
}

func (x *InstallReq) GetReleaseName() string {
	if x != nil {
		return x.ReleaseName
	}
	return ""
}

func (x *InstallReq) GetDryRun() bool {
	if x != nil {
		return x.DryRun
	}
	return false
}

func (x *InstallReq) GetKubeinfo() *KubeInfo {
	if x != nil {
		return x.Kubeinfo
	}
	return nil
}

func (x *InstallReq) GetRepoinfo() *RepoInfo {
	if x != nil {
		return x.Repoinfo
	}
	return nil
}

// UpgradeReq 升级release的请求。
type UpgradeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// contextName 唯一的context 标识。（可选）
	ContextName   string `protobuf:"bytes,1,opt,name=contextName,proto3" json:"contextName,omitempty"`
	RepoChartName string `protobuf:"bytes,2,opt,name=repoChartName,proto3" json:"repoChartName,omitempty"`
	ChartVersion  string `protobuf:"bytes,3,opt,name=chartVersion,proto3" json:"chartVersion,omitempty"`
	// namespace 为空会使用context 默认的空间 （可选）
	Namespace string `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// values 是yaml格式的value文件的内容。（可选）
	Values      string `protobuf:"bytes,6,opt,name=values,proto3" json:"values,omitempty"`
	ReleaseName string `protobuf:"bytes,7,opt,name=releaseName,proto3" json:"releaseName,omitempty"`
	// dry_run 为true 不会真实的部署release。
	DryRun      bool  `protobuf:"varint,9,opt,name=dry_run,json=dryRun,proto3" json:"dry_run,omitempty"`
	HistoryMax  int32 `protobuf:"varint,10,opt,name=history_max,json=historyMax,proto3" json:"history_max,omitempty"`
	ResetValues bool  `protobuf:"varint,11,opt,name=reset_values,json=resetValues,proto3" json:"reset_values,omitempty"`
	// KubeInfo 如果没有contextName，但是有KubeInfo和RepoInfo会创建一个临时的context。
	Kubeinfo *KubeInfo `protobuf:"bytes,12,opt,name=kubeinfo,proto3" json:"kubeinfo,omitempty"`
	// RepoInfo 如果没有contextName，但是有KubeInfo和RepoInfo会创建一个临时的context。
	Repoinfo *RepoInfo `protobuf:"bytes,13,opt,name=repoinfo,proto3" json:"repoinfo,omitempty"`
}

func (x *UpgradeReq) Reset() {
	*x = UpgradeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_helm_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpgradeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeReq) ProtoMessage() {}

func (x *UpgradeReq) ProtoReflect() protoreflect.Message {
	mi := &file_helm_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeReq.ProtoReflect.Descriptor instead.
func (*UpgradeReq) Descriptor() ([]byte, []int) {
	return file_helm_api_proto_rawDescGZIP(), []int{8}
}

func (x *UpgradeReq) GetContextName() string {
	if x != nil {
		return x.ContextName
	}
	return ""
}

func (x *UpgradeReq) GetRepoChartName() string {
	if x != nil {
		return x.RepoChartName
	}
	return ""
}

func (x *UpgradeReq) GetChartVersion() string {
	if x != nil {
		return x.ChartVersion
	}
	return ""
}

func (x *UpgradeReq) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *UpgradeReq) GetValues() string {
	if x != nil {
		return x.Values
	}
	return ""
}

func (x *UpgradeReq) GetReleaseName() string {
	if x != nil {
		return x.ReleaseName
	}
	return ""
}

func (x *UpgradeReq) GetDryRun() bool {
	if x != nil {
		return x.DryRun
	}
	return false
}

func (x *UpgradeReq) GetHistoryMax() int32 {
	if x != nil {
		return x.HistoryMax
	}
	return 0
}

func (x *UpgradeReq) GetResetValues() bool {
	if x != nil {
		return x.ResetValues
	}
	return false
}

func (x *UpgradeReq) GetKubeinfo() *KubeInfo {
	if x != nil {
		return x.Kubeinfo
	}
	return nil
}

func (x *UpgradeReq) GetRepoinfo() *RepoInfo {
	if x != nil {
		return x.Repoinfo
	}
	return nil
}

type GetChartReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// contextName 唯一的context 标识。（可选）
	ContextName  string `protobuf:"bytes,1,opt,name=contextName,proto3" json:"contextName,omitempty"`
	Repo         string `protobuf:"bytes,2,opt,name=repo,proto3" json:"repo,omitempty"`
	ChartName    string `protobuf:"bytes,3,opt,name=chartName,proto3" json:"chartName,omitempty"`
	ChartVersion string `protobuf:"bytes,4,opt,name=chartVersion,proto3" json:"chartVersion,omitempty"`
	// RepoInfo 如果没有contextName，但是有RepoInfo会创建一个临时的context。
	Repoinfo *RepoInfo `protobuf:"bytes,11,opt,name=repoinfo,proto3" json:"repoinfo,omitempty"`
}

func (x *GetChartReq) Reset() {
	*x = GetChartReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_helm_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChartReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChartReq) ProtoMessage() {}

func (x *GetChartReq) ProtoReflect() protoreflect.Message {
	mi := &file_helm_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChartReq.ProtoReflect.Descriptor instead.
func (*GetChartReq) Descriptor() ([]byte, []int) {
	return file_helm_api_proto_rawDescGZIP(), []int{9}
}

func (x *GetChartReq) GetContextName() string {
	if x != nil {
		return x.ContextName
	}
	return ""
}

func (x *GetChartReq) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

func (x *GetChartReq) GetChartName() string {
	if x != nil {
		return x.ChartName
	}
	return ""
}

func (x *GetChartReq) GetChartVersion() string {
	if x != nil {
		return x.ChartVersion
	}
	return ""
}

func (x *GetChartReq) GetRepoinfo() *RepoInfo {
	if x != nil {
		return x.Repoinfo
	}
	return nil
}

type ReleaseReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// contextName 唯一的context 标识。（可选）
	ContextName string `protobuf:"bytes,1,opt,name=contextName,proto3" json:"contextName,omitempty"`
	ReleaseName string `protobuf:"bytes,2,opt,name=releaseName,proto3" json:"releaseName,omitempty"`
	// namespace 为空会使用context 默认的空间 （可选）
	Namespace string `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// KubeInfo 如果没有contextName，但是有KubeInfo会创建一个临时的context。
	Kubeinfo *KubeInfo `protobuf:"bytes,10,opt,name=kubeinfo,proto3" json:"kubeinfo,omitempty"`
}

func (x *ReleaseReq) Reset() {
	*x = ReleaseReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_helm_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseReq) ProtoMessage() {}

func (x *ReleaseReq) ProtoReflect() protoreflect.Message {
	mi := &file_helm_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseReq.ProtoReflect.Descriptor instead.
func (*ReleaseReq) Descriptor() ([]byte, []int) {
	return file_helm_api_proto_rawDescGZIP(), []int{10}
}

func (x *ReleaseReq) GetContextName() string {
	if x != nil {
		return x.ContextName
	}
	return ""
}

func (x *ReleaseReq) GetReleaseName() string {
	if x != nil {
		return x.ReleaseName
	}
	return ""
}

func (x *ReleaseReq) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ReleaseReq) GetKubeinfo() *KubeInfo {
	if x != nil {
		return x.Kubeinfo
	}
	return nil
}

type ReleaseRollbackReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// contextName 唯一的context 标识。（可选）
	ContextName string `protobuf:"bytes,1,opt,name=contextName,proto3" json:"contextName,omitempty"`
	ReleaseName string `protobuf:"bytes,2,opt,name=releaseName,proto3" json:"releaseName,omitempty"`
	Reversion   int32  `protobuf:"varint,3,opt,name=reversion,proto3" json:"reversion,omitempty"`
	// namespace 为空会使用context 默认的空间 （可选）
	Namespace string `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// KubeInfo 如果没有contextName，但是有KubeInfo和RepoInfo会创建一个临时的context。
	Kubeinfo *KubeInfo `protobuf:"bytes,10,opt,name=kubeinfo,proto3" json:"kubeinfo,omitempty"`
	// RepoInfo 如果没有contextName，但是有KubeInfo和RepoInfo会创建一个临时的context。
	Repoinfo *RepoInfo `protobuf:"bytes,11,opt,name=repoinfo,proto3" json:"repoinfo,omitempty"`
}

func (x *ReleaseRollbackReq) Reset() {
	*x = ReleaseRollbackReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_helm_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseRollbackReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseRollbackReq) ProtoMessage() {}

func (x *ReleaseRollbackReq) ProtoReflect() protoreflect.Message {
	mi := &file_helm_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseRollbackReq.ProtoReflect.Descriptor instead.
func (*ReleaseRollbackReq) Descriptor() ([]byte, []int) {
	return file_helm_api_proto_rawDescGZIP(), []int{11}
}

func (x *ReleaseRollbackReq) GetContextName() string {
	if x != nil {
		return x.ContextName
	}
	return ""
}

func (x *ReleaseRollbackReq) GetReleaseName() string {
	if x != nil {
		return x.ReleaseName
	}
	return ""
}

func (x *ReleaseRollbackReq) GetReversion() int32 {
	if x != nil {
		return x.Reversion
	}
	return 0
}

func (x *ReleaseRollbackReq) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ReleaseRollbackReq) GetKubeinfo() *KubeInfo {
	if x != nil {
		return x.Kubeinfo
	}
	return nil
}

func (x *ReleaseRollbackReq) GetRepoinfo() *RepoInfo {
	if x != nil {
		return x.Repoinfo
	}
	return nil
}

type Values struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Yaml string `protobuf:"bytes,1,opt,name=yaml,proto3" json:"yaml,omitempty"`
}

func (x *Values) Reset() {
	*x = Values{}
	if protoimpl.UnsafeEnabled {
		mi := &file_helm_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Values) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Values) ProtoMessage() {}

func (x *Values) ProtoReflect() protoreflect.Message {
	mi := &file_helm_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Values.ProtoReflect.Descriptor instead.
func (*Values) Descriptor() ([]byte, []int) {
	return file_helm_api_proto_rawDescGZIP(), []int{12}
}

func (x *Values) GetYaml() string {
	if x != nil {
		return x.Yaml
	}
	return ""
}

type ListReleaseReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// contextName 唯一的context 标识。（可选）
	ContextName string `protobuf:"bytes,1,opt,name=contextName,proto3" json:"contextName,omitempty"`
	// namespace 为空会使用context 默认的空间 （可选）
	Namespace string `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// KubeInfo 如果没有contextName，但是有KubeInfo会创建一个临时的context。
	Kubeinfo *KubeInfo `protobuf:"bytes,10,opt,name=kubeinfo,proto3" json:"kubeinfo,omitempty"`
}

func (x *ListReleaseReq) Reset() {
	*x = ListReleaseReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_helm_api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListReleaseReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListReleaseReq) ProtoMessage() {}

func (x *ListReleaseReq) ProtoReflect() protoreflect.Message {
	mi := &file_helm_api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListReleaseReq.ProtoReflect.Descriptor instead.
func (*ListReleaseReq) Descriptor() ([]byte, []int) {
	return file_helm_api_proto_rawDescGZIP(), []int{13}
}

func (x *ListReleaseReq) GetContextName() string {
	if x != nil {
		return x.ContextName
	}
	return ""
}

func (x *ListReleaseReq) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ListReleaseReq) GetKubeinfo() *KubeInfo {
	if x != nil {
		return x.Kubeinfo
	}
	return nil
}

type ListReleaseRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Releases []*Release `protobuf:"bytes,1,rep,name=releases,proto3" json:"releases,omitempty"`
}

func (x *ListReleaseRes) Reset() {
	*x = ListReleaseRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_helm_api_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListReleaseRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListReleaseRes) ProtoMessage() {}

func (x *ListReleaseRes) ProtoReflect() protoreflect.Message {
	mi := &file_helm_api_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListReleaseRes.ProtoReflect.Descriptor instead.
func (*ListReleaseRes) Descriptor() ([]byte, []int) {
	return file_helm_api_proto_rawDescGZIP(), []int{14}
}

func (x *ListReleaseRes) GetReleases() []*Release {
	if x != nil {
		return x.Releases
	}
	return nil
}

type File struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name is the path-like name of the template.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Data is the template as byte data.
	Data string `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *File) Reset() {
	*x = File{}
	if protoimpl.UnsafeEnabled {
		mi := &file_helm_api_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*File) ProtoMessage() {}

func (x *File) ProtoReflect() protoreflect.Message {
	mi := &file_helm_api_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use File.ProtoReflect.Descriptor instead.
func (*File) Descriptor() ([]byte, []int) {
	return file_helm_api_proto_rawDescGZIP(), []int{15}
}

func (x *File) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *File) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

// Dependency describes a chart upon which another chart depends.
//
// Dependencies can be used to express developer intent, or to capture the state
// of a chart.
type Dependency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name is the name of the dependency.
	//
	// This must mach the name in the dependency's Chart.yaml.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Version is the version (range) of this chart.
	//
	// A lock file will always produce a single version, while a dependency
	// may contain a semantic version range.
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// The URL to the repository.
	//
	// Appending `index.yaml` to this string should result in a URL that can be
	// used to fetch the repository index.
	Repository string `protobuf:"bytes,3,opt,name=repository,proto3" json:"repository,omitempty"`
	// A yaml path that resolves to a boolean, used for enabling/disabling charts (e.g. subchart1.enabled )
	Condition string `protobuf:"bytes,4,opt,name=condition,proto3" json:"condition,omitempty"`
	// Tags can be used to group charts for enabling/disabling together
	Tags []string `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty"`
	// Enabled bool determines if chart should be loaded
	Enabled bool `protobuf:"varint,6,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// ImportValues holds the mapping of source values to parent key to be imported. Each item can be a
	// string or pair of child/parent sublist items.
	ImportValues string `protobuf:"bytes,7,opt,name=import_values,json=importValues,proto3" json:"import_values,omitempty"`
	// Alias usable alias to be used for the chart
	Alias string `protobuf:"bytes,8,opt,name=alias,proto3" json:"alias,omitempty"`
}

func (x *Dependency) Reset() {
	*x = Dependency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_helm_api_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dependency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dependency) ProtoMessage() {}

func (x *Dependency) ProtoReflect() protoreflect.Message {
	mi := &file_helm_api_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dependency.ProtoReflect.Descriptor instead.
func (*Dependency) Descriptor() ([]byte, []int) {
	return file_helm_api_proto_rawDescGZIP(), []int{16}
}

func (x *Dependency) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Dependency) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Dependency) GetRepository() string {
	if x != nil {
		return x.Repository
	}
	return ""
}

func (x *Dependency) GetCondition() string {
	if x != nil {
		return x.Condition
	}
	return ""
}

func (x *Dependency) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Dependency) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Dependency) GetImportValues() string {
	if x != nil {
		return x.ImportValues
	}
	return ""
}

func (x *Dependency) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

// Maintainer describes a Chart maintainer.
type Maintainer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name is a user name or organization name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Email is an optional email address to contact the named maintainer
	Email string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	// URL is an optional URL to an address for the named maintainer
	Url string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *Maintainer) Reset() {
	*x = Maintainer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_helm_api_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Maintainer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Maintainer) ProtoMessage() {}

func (x *Maintainer) ProtoReflect() protoreflect.Message {
	mi := &file_helm_api_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Maintainer.ProtoReflect.Descriptor instead.
func (*Maintainer) Descriptor() ([]byte, []int) {
	return file_helm_api_proto_rawDescGZIP(), []int{17}
}

func (x *Maintainer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Maintainer) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Maintainer) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

// Metadata for a Chart file. This models the structure of a Chart.yaml file.
type Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the chart
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The URL to a relevant project page, git repo, or contact person
	Home string `protobuf:"bytes,2,opt,name=home,proto3" json:"home,omitempty"`
	// Source is the URL to the source code of this chart
	Sources []string `protobuf:"bytes,3,rep,name=sources,proto3" json:"sources,omitempty"`
	// A SemVer 2 conformant version string of the chart
	Version string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	// A one-sentence description of the chart
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// A list of string keywords
	Keywords []string `protobuf:"bytes,6,rep,name=keywords,proto3" json:"keywords,omitempty"`
	// A list of name and URL/email address combinations for the maintainer(s)
	Maintainers []*Maintainer `protobuf:"bytes,7,rep,name=maintainers,proto3" json:"maintainers,omitempty"`
	// The URL to an icon file.
	Icon string `protobuf:"bytes,8,opt,name=icon,proto3" json:"icon,omitempty"`
	// The API Version of this chart.
	ApiVersion string `protobuf:"bytes,9,opt,name=api_version,json=apiVersion,proto3" json:"api_version,omitempty"`
	// The condition to check to enable chart
	Condition string `protobuf:"bytes,10,opt,name=condition,proto3" json:"condition,omitempty"`
	// The tags to check to enable chart
	Tags string `protobuf:"bytes,11,opt,name=tags,proto3" json:"tags,omitempty"`
	// The version of the application enclosed inside of this chart.
	AppVersion string `protobuf:"bytes,12,opt,name=app_version,json=appVersion,proto3" json:"app_version,omitempty"`
	// Whether or not this chart is deprecated
	Deprecated bool `protobuf:"varint,13,opt,name=deprecated,proto3" json:"deprecated,omitempty"`
	// Annotations are additional mappings uninterpreted by Helm,
	// made available for inspection by other applications.
	Annotations map[string]string `protobuf:"bytes,14,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// KubeVersion is a SemVer constraint specifying the version of Kubernetes required.
	KubeVersion string `protobuf:"bytes,15,opt,name=kubeVersion,proto3" json:"kubeVersion,omitempty"`
	// Dependencies are a list of dependencies for a chart.
	Dependencies []*Dependency `protobuf:"bytes,16,rep,name=dependencies,proto3" json:"dependencies,omitempty"`
	// Specifies the chart type: application or library
	Type string `protobuf:"bytes,17,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_helm_api_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_helm_api_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_helm_api_proto_rawDescGZIP(), []int{18}
}

func (x *Metadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Metadata) GetHome() string {
	if x != nil {
		return x.Home
	}
	return ""
}

func (x *Metadata) GetSources() []string {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *Metadata) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Metadata) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Metadata) GetKeywords() []string {
	if x != nil {
		return x.Keywords
	}
	return nil
}

func (x *Metadata) GetMaintainers() []*Maintainer {
	if x != nil {
		return x.Maintainers
	}
	return nil
}

func (x *Metadata) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *Metadata) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *Metadata) GetCondition() string {
	if x != nil {
		return x.Condition
	}
	return ""
}

func (x *Metadata) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

func (x *Metadata) GetAppVersion() string {
	if x != nil {
		return x.AppVersion
	}
	return ""
}

func (x *Metadata) GetDeprecated() bool {
	if x != nil {
		return x.Deprecated
	}
	return false
}

func (x *Metadata) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *Metadata) GetKubeVersion() string {
	if x != nil {
		return x.KubeVersion
	}
	return ""
}

func (x *Metadata) GetDependencies() []*Dependency {
	if x != nil {
		return x.Dependencies
	}
	return nil
}

func (x *Metadata) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

// Info describes release information.
type Info struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// FirstDeployed is when the release was first deployed.
	FirstDeployed *timestamp.Timestamp `protobuf:"bytes,1,opt,name=first_deployed,json=firstDeployed,proto3" json:"first_deployed,omitempty"`
	// LastDeployed is when the release was last deployed.
	LastDeployed *timestamp.Timestamp `protobuf:"bytes,2,opt,name=last_deployed,json=lastDeployed,proto3" json:"last_deployed,omitempty"`
	// Deleted tracks when this object was deleted.
	Deleted *timestamp.Timestamp `protobuf:"bytes,3,opt,name=deleted,proto3" json:"deleted,omitempty"`
	// Description is human-friendly "log entry" about this release.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Status is the current state of the release
	Status string `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	// Contains the rendered templates/NOTES.txt if available
	Notes string `protobuf:"bytes,6,opt,name=notes,proto3" json:"notes,omitempty"`
}

func (x *Info) Reset() {
	*x = Info{}
	if protoimpl.UnsafeEnabled {
		mi := &file_helm_api_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Info) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Info) ProtoMessage() {}

func (x *Info) ProtoReflect() protoreflect.Message {
	mi := &file_helm_api_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Info.ProtoReflect.Descriptor instead.
func (*Info) Descriptor() ([]byte, []int) {
	return file_helm_api_proto_rawDescGZIP(), []int{19}
}

func (x *Info) GetFirstDeployed() *timestamp.Timestamp {
	if x != nil {
		return x.FirstDeployed
	}
	return nil
}

func (x *Info) GetLastDeployed() *timestamp.Timestamp {
	if x != nil {
		return x.LastDeployed
	}
	return nil
}

func (x *Info) GetDeleted() *timestamp.Timestamp {
	if x != nil {
		return x.Deleted
	}
	return nil
}

func (x *Info) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Info) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Info) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

// Chart is a helm package that contains metadata, a default config, zero or more
// optionally parameterizable templates, and zero or more charts (dependencies).
type Chart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Metadata is the contents of the Chartfile.
	Metadata *Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Templates for this chart.
	Templates []*File `protobuf:"bytes,2,rep,name=templates,proto3" json:"templates,omitempty"`
	// Values are default config for this chart.
	Values string `protobuf:"bytes,3,opt,name=values,proto3" json:"values,omitempty"`
	// Schema is an optional JSON schema for imposing structure on Values
	Schema string `protobuf:"bytes,4,opt,name=schema,proto3" json:"schema,omitempty"`
	// Files are miscellaneous files in a chart archive,
	// e.g. README, LICENSE, etc.
	Files []*File `protobuf:"bytes,5,rep,name=files,proto3" json:"files,omitempty"`
}

func (x *Chart) Reset() {
	*x = Chart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_helm_api_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chart) ProtoMessage() {}

func (x *Chart) ProtoReflect() protoreflect.Message {
	mi := &file_helm_api_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chart.ProtoReflect.Descriptor instead.
func (*Chart) Descriptor() ([]byte, []int) {
	return file_helm_api_proto_rawDescGZIP(), []int{20}
}

func (x *Chart) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Chart) GetTemplates() []*File {
	if x != nil {
		return x.Templates
	}
	return nil
}

func (x *Chart) GetValues() string {
	if x != nil {
		return x.Values
	}
	return ""
}

func (x *Chart) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *Chart) GetFiles() []*File {
	if x != nil {
		return x.Files
	}
	return nil
}

// A HookExecution records the result for the last execution of a hook for a given release.
type HookExecution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// StartedAt indicates the date/time this hook was started
	StartedAt *timestamp.Timestamp `protobuf:"bytes,1,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	// CompletedAt indicates the date/time this hook was completed.
	CompletedAt *timestamp.Timestamp `protobuf:"bytes,2,opt,name=completed_at,json=completedAt,proto3" json:"completed_at,omitempty"`
	// Phase indicates whether the hook completed successfully
	Phase string `protobuf:"bytes,3,opt,name=phase,proto3" json:"phase,omitempty"`
}

func (x *HookExecution) Reset() {
	*x = HookExecution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_helm_api_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HookExecution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HookExecution) ProtoMessage() {}

func (x *HookExecution) ProtoReflect() protoreflect.Message {
	mi := &file_helm_api_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HookExecution.ProtoReflect.Descriptor instead.
func (*HookExecution) Descriptor() ([]byte, []int) {
	return file_helm_api_proto_rawDescGZIP(), []int{21}
}

func (x *HookExecution) GetStartedAt() *timestamp.Timestamp {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

func (x *HookExecution) GetCompletedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CompletedAt
	}
	return nil
}

func (x *HookExecution) GetPhase() string {
	if x != nil {
		return x.Phase
	}
	return ""
}

// Hook defines a hook object.
type Hook struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Kind is the Kubernetes kind.
	Kind string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	// Path is the chart-relative path to the template.
	Path string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	// Manifest is the manifest contents.
	Manifest string `protobuf:"bytes,4,opt,name=manifest,proto3" json:"manifest,omitempty"`
	// Events are the events that this hook fires on.
	Events []string `protobuf:"bytes,5,rep,name=events,proto3" json:"events,omitempty"`
	// LastRun indicates the date/time this was last run.
	LastRun *HookExecution `protobuf:"bytes,6,opt,name=last_run,json=lastRun,proto3" json:"last_run,omitempty"`
	// Weight indicates the sort order for execution among similar Hook type
	Weight int64 `protobuf:"varint,7,opt,name=weight,proto3" json:"weight,omitempty"`
	// DeletePolicies are the policies that indicate when to delete the hook
	DeletePolicies []string `protobuf:"bytes,8,rep,name=delete_policies,json=deletePolicies,proto3" json:"delete_policies,omitempty"`
}

func (x *Hook) Reset() {
	*x = Hook{}
	if protoimpl.UnsafeEnabled {
		mi := &file_helm_api_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Hook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hook) ProtoMessage() {}

func (x *Hook) ProtoReflect() protoreflect.Message {
	mi := &file_helm_api_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hook.ProtoReflect.Descriptor instead.
func (*Hook) Descriptor() ([]byte, []int) {
	return file_helm_api_proto_rawDescGZIP(), []int{22}
}

func (x *Hook) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Hook) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *Hook) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Hook) GetManifest() string {
	if x != nil {
		return x.Manifest
	}
	return ""
}

func (x *Hook) GetEvents() []string {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *Hook) GetLastRun() *HookExecution {
	if x != nil {
		return x.LastRun
	}
	return nil
}

func (x *Hook) GetWeight() int64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *Hook) GetDeletePolicies() []string {
	if x != nil {
		return x.DeletePolicies
	}
	return nil
}

// Release describes a deployment of a chart, together with the chart
// and the variables used to deploy that chart.
type Release struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name is the name of the release
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Info provides information about a release
	Info *Info `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	// Chart is the chart that was released.
	Chart *Chart `protobuf:"bytes,3,opt,name=chart,proto3" json:"chart,omitempty"`
	// Config is the set of extra Values added to the chart.
	// These values override the default values inside of the chart.
	Config string `protobuf:"bytes,4,opt,name=config,proto3" json:"config,omitempty"`
	// Manifest is the string representation of the rendered template.
	Manifest string `protobuf:"bytes,5,opt,name=manifest,proto3" json:"manifest,omitempty"`
	// Hooks are all of the hooks declared for this release.
	Hooks []*Hook `protobuf:"bytes,6,rep,name=hooks,proto3" json:"hooks,omitempty"`
	// Version is an int which represents the version of the release.
	Version int64 `protobuf:"varint,7,opt,name=version,proto3" json:"version,omitempty"`
	// Namespace is the kubernetes namespace of the release.
	Namespace string `protobuf:"bytes,8,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *Release) Reset() {
	*x = Release{}
	if protoimpl.UnsafeEnabled {
		mi := &file_helm_api_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Release) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Release) ProtoMessage() {}

func (x *Release) ProtoReflect() protoreflect.Message {
	mi := &file_helm_api_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Release.ProtoReflect.Descriptor instead.
func (*Release) Descriptor() ([]byte, []int) {
	return file_helm_api_proto_rawDescGZIP(), []int{23}
}

func (x *Release) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Release) GetInfo() *Info {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *Release) GetChart() *Chart {
	if x != nil {
		return x.Chart
	}
	return nil
}

func (x *Release) GetConfig() string {
	if x != nil {
		return x.Config
	}
	return ""
}

func (x *Release) GetManifest() string {
	if x != nil {
		return x.Manifest
	}
	return ""
}

func (x *Release) GetHooks() []*Hook {
	if x != nil {
		return x.Hooks
	}
	return nil
}

func (x *Release) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Release) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type ChartInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	RepoName     string `protobuf:"bytes,2,opt,name=repo_name,json=repoName,proto3" json:"repo_name,omitempty"`
	ChartVersion string `protobuf:"bytes,3,opt,name=chart_version,json=chartVersion,proto3" json:"chart_version,omitempty"`
	AppVersion   string `protobuf:"bytes,4,opt,name=app_version,json=appVersion,proto3" json:"app_version,omitempty"`
	Description  string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Icon         string `protobuf:"bytes,6,opt,name=icon,proto3" json:"icon,omitempty"`
}

func (x *ChartInfo) Reset() {
	*x = ChartInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_helm_api_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartInfo) ProtoMessage() {}

func (x *ChartInfo) ProtoReflect() protoreflect.Message {
	mi := &file_helm_api_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartInfo.ProtoReflect.Descriptor instead.
func (*ChartInfo) Descriptor() ([]byte, []int) {
	return file_helm_api_proto_rawDescGZIP(), []int{24}
}

func (x *ChartInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ChartInfo) GetRepoName() string {
	if x != nil {
		return x.RepoName
	}
	return ""
}

func (x *ChartInfo) GetChartVersion() string {
	if x != nil {
		return x.ChartVersion
	}
	return ""
}

func (x *ChartInfo) GetAppVersion() string {
	if x != nil {
		return x.AppVersion
	}
	return ""
}

func (x *ChartInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ChartInfo) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

type SearchRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Charts []*ChartInfo `protobuf:"bytes,1,rep,name=charts,proto3" json:"charts,omitempty"`
}

func (x *SearchRes) Reset() {
	*x = SearchRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_helm_api_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRes) ProtoMessage() {}

func (x *SearchRes) ProtoReflect() protoreflect.Message {
	mi := &file_helm_api_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRes.ProtoReflect.Descriptor instead.
func (*SearchRes) Descriptor() ([]byte, []int) {
	return file_helm_api_proto_rawDescGZIP(), []int{25}
}

func (x *SearchRes) GetCharts() []*ChartInfo {
	if x != nil {
		return x.Charts
	}
	return nil
}

// SearchReq
type SearchReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyword string `protobuf:"bytes,2,opt,name=keyword,proto3" json:"keyword,omitempty"`
	// use regular expressions for searching repositories you have added
	Regexp bool `protobuf:"varint,3,opt,name=regexp,proto3" json:"regexp,omitempty"`
	// contextName is name of CreateHelmContext return
	ContextName string `protobuf:"bytes,5,opt,name=contextName,proto3" json:"contextName,omitempty"`
	// RepoInfo or contextName
	Repoinfo *RepoInfo `protobuf:"bytes,11,opt,name=repoinfo,proto3" json:"repoinfo,omitempty"`
}

func (x *SearchReq) Reset() {
	*x = SearchReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_helm_api_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchReq) ProtoMessage() {}

func (x *SearchReq) ProtoReflect() protoreflect.Message {
	mi := &file_helm_api_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchReq.ProtoReflect.Descriptor instead.
func (*SearchReq) Descriptor() ([]byte, []int) {
	return file_helm_api_proto_rawDescGZIP(), []int{26}
}

func (x *SearchReq) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *SearchReq) GetRegexp() bool {
	if x != nil {
		return x.Regexp
	}
	return false
}

func (x *SearchReq) GetContextName() string {
	if x != nil {
		return x.ContextName
	}
	return ""
}

func (x *SearchReq) GetRepoinfo() *RepoInfo {
	if x != nil {
		return x.Repoinfo
	}
	return nil
}

type ListChartReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// contextName is name of CreateHelmContext return
	ContextName string `protobuf:"bytes,1,opt,name=contextName,proto3" json:"contextName,omitempty"`
	// RepoInfo or contextName
	Repoinfo *RepoInfo `protobuf:"bytes,11,opt,name=repoinfo,proto3" json:"repoinfo,omitempty"`
}

func (x *ListChartReq) Reset() {
	*x = ListChartReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_helm_api_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListChartReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListChartReq) ProtoMessage() {}

func (x *ListChartReq) ProtoReflect() protoreflect.Message {
	mi := &file_helm_api_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListChartReq.ProtoReflect.Descriptor instead.
func (*ListChartReq) Descriptor() ([]byte, []int) {
	return file_helm_api_proto_rawDescGZIP(), []int{27}
}

func (x *ListChartReq) GetContextName() string {
	if x != nil {
		return x.ContextName
	}
	return ""
}

func (x *ListChartReq) GetRepoinfo() *RepoInfo {
	if x != nil {
		return x.Repoinfo
	}
	return nil
}

var File_helm_api_proto protoreflect.FileDescriptor

var file_helm_api_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x68, 0x65, 0x6c, 0x6d, 0x2d, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x07, 0x68, 0x65, 0x6c, 0x6d, 0x61, 0x70, 0x69, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xec, 0x01, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x65, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x65, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79,
	0x46, 0x69, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x46,
	0x69, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x69,
	0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x74, 0x6c, 0x73,
	0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x69,
	0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x53, 0x6b, 0x69, 0x70, 0x54, 0x6c, 0x73, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x22, 0xb8, 0x01, 0x0a, 0x0e, 0x48, 0x65, 0x6c, 0x6d, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x6b,
	0x75, 0x62, 0x65, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x68, 0x65, 0x6c, 0x6d, 0x61, 0x70, 0x69, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x08, 0x6b, 0x75, 0x62, 0x65, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x2d, 0x0a, 0x08, 0x72, 0x65,
	0x70, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x68,
	0x65, 0x6c, 0x6d, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x08, 0x72, 0x65, 0x70, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x22,
	0x62, 0x0a, 0x08, 0x4b, 0x75, 0x62, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x6b,
	0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x22, 0x32, 0x0a, 0x08, 0x52, 0x65, 0x70, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x26, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x06, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x73, 0x22, 0x2a, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x48, 0x65, 0x6c, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x60, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x61,
	0x70, 0x69, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x72, 0x65, 0x70,
	0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x24, 0x0a, 0x0e, 0x48, 0x65, 0x6c, 0x6d, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xc7, 0x02, 0x0a, 0x0a,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x72, 0x65, 0x70, 0x6f, 0x43, 0x68, 0x61, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x43, 0x68, 0x61, 0x72, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x64, 0x72, 0x79, 0x5f, 0x72, 0x75, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x64, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x12, 0x2d, 0x0a, 0x08, 0x6b, 0x75, 0x62, 0x65, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x68, 0x65, 0x6c, 0x6d,
	0x61, 0x70, 0x69, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x6b, 0x75,
	0x62, 0x65, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x2d, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x61,
	0x70, 0x69, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x72, 0x65, 0x70,
	0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x8b, 0x03, 0x0a, 0x0a, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x43, 0x68,
	0x61, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72,
	0x65, 0x70, 0x6f, 0x43, 0x68, 0x61, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x72, 0x79, 0x5f,
	0x72, 0x75, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x72, 0x79, 0x52, 0x75,
	0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x6d, 0x61, 0x78,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d,
	0x61, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x65, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x08, 0x6b, 0x75, 0x62, 0x65, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x61, 0x70,
	0x69, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x6b, 0x75, 0x62, 0x65,
	0x69, 0x6e, 0x66, 0x6f, 0x12, 0x2d, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x61, 0x70, 0x69,
	0x2e, 0x52, 0x65, 0x70, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x69,
	0x6e, 0x66, 0x6f, 0x22, 0xb4, 0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x72, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x08, 0x72,
	0x65, 0x70, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x68, 0x65, 0x6c, 0x6d, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x9d, 0x01, 0x0a, 0x0a, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x6b,
	0x75, 0x62, 0x65, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x68, 0x65, 0x6c, 0x6d, 0x61, 0x70, 0x69, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x08, 0x6b, 0x75, 0x62, 0x65, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xf2, 0x01, 0x0a, 0x12, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x2d, 0x0a, 0x08, 0x6b, 0x75, 0x62, 0x65, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x61, 0x70, 0x69, 0x2e, 0x4b, 0x75,
	0x62, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x6b, 0x75, 0x62, 0x65, 0x69, 0x6e, 0x66, 0x6f,
	0x12, 0x2d, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x70,
	0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x22,
	0x1c, 0x0a, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x61, 0x6d,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x79, 0x61, 0x6d, 0x6c, 0x22, 0x7f, 0x0a,
	0x0e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x2d, 0x0a, 0x08, 0x6b, 0x75, 0x62, 0x65, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x61, 0x70, 0x69, 0x2e, 0x4b, 0x75, 0x62, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x6b, 0x75, 0x62, 0x65, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x3e,
	0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x12, 0x2c, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x22, 0x2e,
	0x0a, 0x04, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xe1,
	0x01, 0x0a, 0x0a, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69,
	0x61, 0x73, 0x22, 0x48, 0x0a, 0x0a, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0xf8, 0x04, 0x0a,
	0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x6f, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f,
	0x72, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f,
	0x72, 0x64, 0x73, 0x12, 0x35, 0x0a, 0x0b, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x61,
	0x70, 0x69, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x0b, 0x6d,
	0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x1f,
	0x0a, 0x0b, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x44, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x61, 0x70,
	0x69, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6b, 0x75, 0x62, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6b,
	0x75, 0x62, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x0c, 0x64, 0x65,
	0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x70, 0x65, 0x6e,
	0x64, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63,
	0x69, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x90, 0x02, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x41, 0x0a, 0x0e, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x66, 0x69, 0x72, 0x73, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x22, 0xb8, 0x01, 0x0a, 0x05, 0x43,
	0x68, 0x61, 0x72, 0x74, 0x12, 0x2d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x61, 0x70, 0x69,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x09, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x61, 0x70, 0x69,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x09, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x12, 0x23, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x05,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x9f, 0x01, 0x0a, 0x0d, 0x48, 0x6f, 0x6f, 0x6b, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x22, 0xea, 0x01, 0x0a, 0x04, 0x48, 0x6f, 0x6f, 0x6b,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08,
	0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x31, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x75, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x61, 0x70, 0x69, 0x2e, 0x48, 0x6f, 0x6f,
	0x6b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6c, 0x61, 0x73, 0x74,
	0x52, 0x75, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x22, 0xf7, 0x01, 0x0a, 0x07, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x61, 0x70, 0x69,
	0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x05, 0x63, 0x68, 0x61, 0x72, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73,
	0x74, 0x12, 0x23, 0x0a, 0x05, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x61, 0x70, 0x69, 0x2e, 0x48, 0x6f, 0x6f, 0x6b, 0x52,
	0x05, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0xb8,
	0x01, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x68, 0x61, 0x72, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x22, 0x37, 0x0a, 0x09, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x61, 0x70, 0x69,
	0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x73, 0x22, 0x8e, 0x01, 0x0a, 0x09, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71,
	0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x67, 0x65, 0x78, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x67, 0x65,
	0x78, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x61, 0x70, 0x69,
	0x2e, 0x52, 0x65, 0x70, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x69,
	0x6e, 0x66, 0x6f, 0x22, 0x5f, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x72, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x61, 0x70,
	0x69, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f,
	0x69, 0x6e, 0x66, 0x6f, 0x32, 0xdc, 0x0b, 0x0a, 0x0e, 0x48, 0x65, 0x6c, 0x6d, 0x41, 0x70, 0x69,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x59, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x17, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x61,
	0x70, 0x69, 0x2e, 0x48, 0x65, 0x6c, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x17, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x61, 0x70, 0x69, 0x2e, 0x48, 0x65, 0x6c, 0x6d,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x10, 0x22, 0x0b, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x3a,
	0x01, 0x2a, 0x12, 0x62, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x1d, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x48, 0x65, 0x6c, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x14, 0x2a, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2f,
	0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x5f, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x70, 0x6f, 0x12, 0x16, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x61, 0x70, 0x69, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x1a, 0x16, 0x2f, 0x76,
	0x31, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f,
	0x72, 0x65, 0x70, 0x6f, 0x3a, 0x01, 0x2a, 0x12, 0x5d, 0x0a, 0x0e, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x13, 0x2e, 0x68, 0x65, 0x6c, 0x6d,
	0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x10,
	0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x22, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x72, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x5d, 0x0a, 0x0e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x13, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x61,
	0x70, 0x69, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e,
	0x68, 0x65, 0x6c, 0x6d, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x22,
	0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x1a, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x73, 0x0a, 0x10, 0x55, 0x6e, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x13, 0x2e, 0x68, 0x65, 0x6c, 0x6d,
	0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x2a, 0x27,
	0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x7d, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2f, 0x7b, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x76, 0x0a, 0x08, 0x47, 0x65,
	0x74, 0x43, 0x68, 0x61, 0x72, 0x74, 0x12, 0x14, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x61, 0x70, 0x69,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x0e, 0x2e, 0x68,
	0x65, 0x6c, 0x6d, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x22, 0x44, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x3e, 0x22, 0x39, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x63, 0x68, 0x61, 0x72, 0x74, 0x2f, 0x7b, 0x72,
	0x65, 0x70, 0x6f, 0x7d, 0x2f, 0x7b, 0x63, 0x68, 0x61, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x7d,
	0x2f, 0x7b, 0x63, 0x68, 0x61, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x7d, 0x3a,
	0x01, 0x2a, 0x12, 0x64, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x12, 0x13, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x61, 0x70, 0x69, 0x2e,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x12,
	0x27, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x7d, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2f, 0x7b, 0x72, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x73, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x13, 0x2e, 0x68,
	0x65, 0x6c, 0x6d, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x0f, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x22, 0x2e, 0x2f, 0x76, 0x31, 0x2f,
	0x7b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x2f, 0x7b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x7d, 0x2f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x65, 0x0a,
	0x0b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x17, 0x2e, 0x68,
	0x65, 0x6c, 0x6d, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x61, 0x70, 0x69, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x22, 0x24,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x22, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x3a, 0x01, 0x2a, 0x12, 0x83, 0x01, 0x0a, 0x0f, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x1b, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x61,
	0x70, 0x69, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x3b, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x35, 0x1a, 0x30, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x2f, 0x7b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x72,
	0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x3a, 0x01, 0x2a, 0x12, 0x7d, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0x13, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x61, 0x70, 0x69, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x22, 0x3a, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x34, 0x22, 0x2f, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x2f, 0x7b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x3a, 0x01, 0x2a, 0x12, 0x65, 0x0a, 0x06, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x12, 0x12, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x61, 0x70,
	0x69, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x22, 0x33, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2d, 0x12, 0x2b, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2f, 0x7b, 0x6b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x7d, 0x2f, 0x7b, 0x72, 0x65, 0x67, 0x65, 0x78, 0x70, 0x7d,
	0x12, 0x51, 0x0a, 0x03, 0x41, 0x6c, 0x6c, 0x12, 0x15, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x61, 0x70,
	0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x12,
	0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52,
	0x65, 0x73, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x76, 0x31, 0x2f,
	0x7b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x42, 0x2c, 0x0a, 0x0f, 0x77, 0x65, 0x69, 0x70, 0x65, 0x6e, 0x67, 0x2e, 0x68,
	0x65, 0x6c, 0x6d, 0x61, 0x70, 0x69, 0x42, 0x0c, 0x48, 0x65, 0x6c, 0x6d, 0x41, 0x70, 0x69, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x09, 0x2e, 0x3b, 0x68, 0x65, 0x6c, 0x6d, 0x61, 0x70,
	0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_helm_api_proto_rawDescOnce sync.Once
	file_helm_api_proto_rawDescData = file_helm_api_proto_rawDesc
)

func file_helm_api_proto_rawDescGZIP() []byte {
	file_helm_api_proto_rawDescOnce.Do(func() {
		file_helm_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_helm_api_proto_rawDescData)
	})
	return file_helm_api_proto_rawDescData
}

var file_helm_api_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_helm_api_proto_goTypes = []interface{}{
	(*Entry)(nil),                // 0: helmapi.Entry
	(*HelmContextReq)(nil),       // 1: helmapi.HelmContextReq
	(*KubeInfo)(nil),             // 2: helmapi.KubeInfo
	(*RepoInfo)(nil),             // 3: helmapi.RepoInfo
	(*DeleteHelmContextReq)(nil), // 4: helmapi.DeleteHelmContextReq
	(*UpdateRepoReq)(nil),        // 5: helmapi.UpdateRepoReq
	(*HelmContextRes)(nil),       // 6: helmapi.HelmContextRes
	(*InstallReq)(nil),           // 7: helmapi.InstallReq
	(*UpgradeReq)(nil),           // 8: helmapi.UpgradeReq
	(*GetChartReq)(nil),          // 9: helmapi.GetChartReq
	(*ReleaseReq)(nil),           // 10: helmapi.ReleaseReq
	(*ReleaseRollbackReq)(nil),   // 11: helmapi.ReleaseRollbackReq
	(*Values)(nil),               // 12: helmapi.Values
	(*ListReleaseReq)(nil),       // 13: helmapi.ListReleaseReq
	(*ListReleaseRes)(nil),       // 14: helmapi.ListReleaseRes
	(*File)(nil),                 // 15: helmapi.File
	(*Dependency)(nil),           // 16: helmapi.Dependency
	(*Maintainer)(nil),           // 17: helmapi.Maintainer
	(*Metadata)(nil),             // 18: helmapi.Metadata
	(*Info)(nil),                 // 19: helmapi.Info
	(*Chart)(nil),                // 20: helmapi.Chart
	(*HookExecution)(nil),        // 21: helmapi.HookExecution
	(*Hook)(nil),                 // 22: helmapi.Hook
	(*Release)(nil),              // 23: helmapi.Release
	(*ChartInfo)(nil),            // 24: helmapi.ChartInfo
	(*SearchRes)(nil),            // 25: helmapi.SearchRes
	(*SearchReq)(nil),            // 26: helmapi.SearchReq
	(*ListChartReq)(nil),         // 27: helmapi.ListChartReq
	nil,                          // 28: helmapi.Metadata.AnnotationsEntry
	(*timestamp.Timestamp)(nil),  // 29: google.protobuf.Timestamp
	(*empty.Empty)(nil),          // 30: google.protobuf.Empty
}
var file_helm_api_proto_depIdxs = []int32{
	2,  // 0: helmapi.HelmContextReq.kubeinfo:type_name -> helmapi.KubeInfo
	3,  // 1: helmapi.HelmContextReq.repoinfo:type_name -> helmapi.RepoInfo
	0,  // 2: helmapi.RepoInfo.entrys:type_name -> helmapi.Entry
	3,  // 3: helmapi.UpdateRepoReq.repoinfo:type_name -> helmapi.RepoInfo
	2,  // 4: helmapi.InstallReq.kubeinfo:type_name -> helmapi.KubeInfo
	3,  // 5: helmapi.InstallReq.repoinfo:type_name -> helmapi.RepoInfo
	2,  // 6: helmapi.UpgradeReq.kubeinfo:type_name -> helmapi.KubeInfo
	3,  // 7: helmapi.UpgradeReq.repoinfo:type_name -> helmapi.RepoInfo
	3,  // 8: helmapi.GetChartReq.repoinfo:type_name -> helmapi.RepoInfo
	2,  // 9: helmapi.ReleaseReq.kubeinfo:type_name -> helmapi.KubeInfo
	2,  // 10: helmapi.ReleaseRollbackReq.kubeinfo:type_name -> helmapi.KubeInfo
	3,  // 11: helmapi.ReleaseRollbackReq.repoinfo:type_name -> helmapi.RepoInfo
	2,  // 12: helmapi.ListReleaseReq.kubeinfo:type_name -> helmapi.KubeInfo
	23, // 13: helmapi.ListReleaseRes.releases:type_name -> helmapi.Release
	17, // 14: helmapi.Metadata.maintainers:type_name -> helmapi.Maintainer
	28, // 15: helmapi.Metadata.annotations:type_name -> helmapi.Metadata.AnnotationsEntry
	16, // 16: helmapi.Metadata.dependencies:type_name -> helmapi.Dependency
	29, // 17: helmapi.Info.first_deployed:type_name -> google.protobuf.Timestamp
	29, // 18: helmapi.Info.last_deployed:type_name -> google.protobuf.Timestamp
	29, // 19: helmapi.Info.deleted:type_name -> google.protobuf.Timestamp
	18, // 20: helmapi.Chart.metadata:type_name -> helmapi.Metadata
	15, // 21: helmapi.Chart.templates:type_name -> helmapi.File
	15, // 22: helmapi.Chart.files:type_name -> helmapi.File
	29, // 23: helmapi.HookExecution.started_at:type_name -> google.protobuf.Timestamp
	29, // 24: helmapi.HookExecution.completed_at:type_name -> google.protobuf.Timestamp
	21, // 25: helmapi.Hook.last_run:type_name -> helmapi.HookExecution
	19, // 26: helmapi.Release.info:type_name -> helmapi.Info
	20, // 27: helmapi.Release.chart:type_name -> helmapi.Chart
	22, // 28: helmapi.Release.hooks:type_name -> helmapi.Hook
	24, // 29: helmapi.SearchRes.charts:type_name -> helmapi.ChartInfo
	3,  // 30: helmapi.SearchReq.repoinfo:type_name -> helmapi.RepoInfo
	3,  // 31: helmapi.ListChartReq.repoinfo:type_name -> helmapi.RepoInfo
	1,  // 32: helmapi.HelmApiService.CreateContext:input_type -> helmapi.HelmContextReq
	4,  // 33: helmapi.HelmApiService.DeleteContext:input_type -> helmapi.DeleteHelmContextReq
	5,  // 34: helmapi.HelmApiService.UpdateRepo:input_type -> helmapi.UpdateRepoReq
	7,  // 35: helmapi.HelmApiService.InstallRelease:input_type -> helmapi.InstallReq
	8,  // 36: helmapi.HelmApiService.UpgradeRelease:input_type -> helmapi.UpgradeReq
	10, // 37: helmapi.HelmApiService.UninstallRelease:input_type -> helmapi.ReleaseReq
	9,  // 38: helmapi.HelmApiService.GetChart:input_type -> helmapi.GetChartReq
	10, // 39: helmapi.HelmApiService.GetRelease:input_type -> helmapi.ReleaseReq
	10, // 40: helmapi.HelmApiService.GetReleaseValues:input_type -> helmapi.ReleaseReq
	13, // 41: helmapi.HelmApiService.ListRelease:input_type -> helmapi.ListReleaseReq
	11, // 42: helmapi.HelmApiService.RollbackRelease:input_type -> helmapi.ReleaseRollbackReq
	10, // 43: helmapi.HelmApiService.GetReleaseHistory:input_type -> helmapi.ReleaseReq
	26, // 44: helmapi.HelmApiService.Search:input_type -> helmapi.SearchReq
	27, // 45: helmapi.HelmApiService.All:input_type -> helmapi.ListChartReq
	6,  // 46: helmapi.HelmApiService.CreateContext:output_type -> helmapi.HelmContextRes
	30, // 47: helmapi.HelmApiService.DeleteContext:output_type -> google.protobuf.Empty
	30, // 48: helmapi.HelmApiService.UpdateRepo:output_type -> google.protobuf.Empty
	23, // 49: helmapi.HelmApiService.InstallRelease:output_type -> helmapi.Release
	23, // 50: helmapi.HelmApiService.UpgradeRelease:output_type -> helmapi.Release
	30, // 51: helmapi.HelmApiService.UninstallRelease:output_type -> google.protobuf.Empty
	20, // 52: helmapi.HelmApiService.GetChart:output_type -> helmapi.Chart
	23, // 53: helmapi.HelmApiService.GetRelease:output_type -> helmapi.Release
	12, // 54: helmapi.HelmApiService.GetReleaseValues:output_type -> helmapi.Values
	14, // 55: helmapi.HelmApiService.ListRelease:output_type -> helmapi.ListReleaseRes
	30, // 56: helmapi.HelmApiService.RollbackRelease:output_type -> google.protobuf.Empty
	14, // 57: helmapi.HelmApiService.GetReleaseHistory:output_type -> helmapi.ListReleaseRes
	25, // 58: helmapi.HelmApiService.Search:output_type -> helmapi.SearchRes
	25, // 59: helmapi.HelmApiService.All:output_type -> helmapi.SearchRes
	46, // [46:60] is the sub-list for method output_type
	32, // [32:46] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() { file_helm_api_proto_init() }
func file_helm_api_proto_init() {
	if File_helm_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_helm_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Entry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_helm_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelmContextReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_helm_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_helm_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepoInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_helm_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteHelmContextReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_helm_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRepoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_helm_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelmContextRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_helm_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstallReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_helm_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpgradeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_helm_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChartReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_helm_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_helm_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseRollbackReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_helm_api_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Values); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_helm_api_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListReleaseReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_helm_api_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListReleaseRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_helm_api_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*File); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_helm_api_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dependency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_helm_api_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Maintainer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_helm_api_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_helm_api_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Info); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_helm_api_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_helm_api_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HookExecution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_helm_api_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Hook); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_helm_api_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Release); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_helm_api_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_helm_api_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_helm_api_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_helm_api_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListChartReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_helm_api_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_helm_api_proto_goTypes,
		DependencyIndexes: file_helm_api_proto_depIdxs,
		MessageInfos:      file_helm_api_proto_msgTypes,
	}.Build()
	File_helm_api_proto = out.File
	file_helm_api_proto_rawDesc = nil
	file_helm_api_proto_goTypes = nil
	file_helm_api_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// HelmApiServiceClient is the client API for HelmApiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HelmApiServiceClient interface {
	// CreateContext 创建context
	CreateContext(ctx context.Context, in *HelmContextReq, opts ...grpc.CallOption) (*HelmContextRes, error)
	// DeleteContext 删除context
	DeleteContext(ctx context.Context, in *DeleteHelmContextReq, opts ...grpc.CallOption) (*empty.Empty, error)
	// UpdateRepo 更新context 内repo 信息
	UpdateRepo(ctx context.Context, in *UpdateRepoReq, opts ...grpc.CallOption) (*empty.Empty, error)
	// InstallRelease 安装charts
	InstallRelease(ctx context.Context, in *InstallReq, opts ...grpc.CallOption) (*Release, error)
	// UpgradeRelease 更新release
	UpgradeRelease(ctx context.Context, in *UpgradeReq, opts ...grpc.CallOption) (*Release, error)
	// UninstallRelease 删除release
	UninstallRelease(ctx context.Context, in *ReleaseReq, opts ...grpc.CallOption) (*empty.Empty, error)
	// GetChart 获取 chart 信息
	GetChart(ctx context.Context, in *GetChartReq, opts ...grpc.CallOption) (*Chart, error)
	// GetRelease 获取某个release实例信息
	GetRelease(ctx context.Context, in *ReleaseReq, opts ...grpc.CallOption) (*Release, error)
	// GetReleaseValues 某个release实例values信息
	GetReleaseValues(ctx context.Context, in *ReleaseReq, opts ...grpc.CallOption) (*Values, error)
	// ListRelease 列出某个context下全部release.
	ListRelease(ctx context.Context, in *ListReleaseReq, opts ...grpc.CallOption) (*ListReleaseRes, error)
	// RollbackRelease 回滚某个release
	RollbackRelease(ctx context.Context, in *ReleaseRollbackReq, opts ...grpc.CallOption) (*empty.Empty, error)
	// GetReleaseHistory 列出release 历史
	GetReleaseHistory(ctx context.Context, in *ReleaseReq, opts ...grpc.CallOption) (*ListReleaseRes, error)
	// Search 查找某个repo的chart
	Search(ctx context.Context, in *SearchReq, opts ...grpc.CallOption) (*SearchRes, error)
	// All 列出某个context所有的chart
	All(ctx context.Context, in *ListChartReq, opts ...grpc.CallOption) (*SearchRes, error)
}

type helmApiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHelmApiServiceClient(cc grpc.ClientConnInterface) HelmApiServiceClient {
	return &helmApiServiceClient{cc}
}

func (c *helmApiServiceClient) CreateContext(ctx context.Context, in *HelmContextReq, opts ...grpc.CallOption) (*HelmContextRes, error) {
	out := new(HelmContextRes)
	err := c.cc.Invoke(ctx, "/helmapi.HelmApiService/CreateContext", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmApiServiceClient) DeleteContext(ctx context.Context, in *DeleteHelmContextReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/helmapi.HelmApiService/DeleteContext", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmApiServiceClient) UpdateRepo(ctx context.Context, in *UpdateRepoReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/helmapi.HelmApiService/UpdateRepo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmApiServiceClient) InstallRelease(ctx context.Context, in *InstallReq, opts ...grpc.CallOption) (*Release, error) {
	out := new(Release)
	err := c.cc.Invoke(ctx, "/helmapi.HelmApiService/InstallRelease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmApiServiceClient) UpgradeRelease(ctx context.Context, in *UpgradeReq, opts ...grpc.CallOption) (*Release, error) {
	out := new(Release)
	err := c.cc.Invoke(ctx, "/helmapi.HelmApiService/UpgradeRelease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmApiServiceClient) UninstallRelease(ctx context.Context, in *ReleaseReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/helmapi.HelmApiService/UninstallRelease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmApiServiceClient) GetChart(ctx context.Context, in *GetChartReq, opts ...grpc.CallOption) (*Chart, error) {
	out := new(Chart)
	err := c.cc.Invoke(ctx, "/helmapi.HelmApiService/GetChart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmApiServiceClient) GetRelease(ctx context.Context, in *ReleaseReq, opts ...grpc.CallOption) (*Release, error) {
	out := new(Release)
	err := c.cc.Invoke(ctx, "/helmapi.HelmApiService/GetRelease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmApiServiceClient) GetReleaseValues(ctx context.Context, in *ReleaseReq, opts ...grpc.CallOption) (*Values, error) {
	out := new(Values)
	err := c.cc.Invoke(ctx, "/helmapi.HelmApiService/GetReleaseValues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmApiServiceClient) ListRelease(ctx context.Context, in *ListReleaseReq, opts ...grpc.CallOption) (*ListReleaseRes, error) {
	out := new(ListReleaseRes)
	err := c.cc.Invoke(ctx, "/helmapi.HelmApiService/ListRelease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmApiServiceClient) RollbackRelease(ctx context.Context, in *ReleaseRollbackReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/helmapi.HelmApiService/RollbackRelease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmApiServiceClient) GetReleaseHistory(ctx context.Context, in *ReleaseReq, opts ...grpc.CallOption) (*ListReleaseRes, error) {
	out := new(ListReleaseRes)
	err := c.cc.Invoke(ctx, "/helmapi.HelmApiService/GetReleaseHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmApiServiceClient) Search(ctx context.Context, in *SearchReq, opts ...grpc.CallOption) (*SearchRes, error) {
	out := new(SearchRes)
	err := c.cc.Invoke(ctx, "/helmapi.HelmApiService/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmApiServiceClient) All(ctx context.Context, in *ListChartReq, opts ...grpc.CallOption) (*SearchRes, error) {
	out := new(SearchRes)
	err := c.cc.Invoke(ctx, "/helmapi.HelmApiService/All", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HelmApiServiceServer is the server API for HelmApiService service.
type HelmApiServiceServer interface {
	// CreateContext 创建context
	CreateContext(context.Context, *HelmContextReq) (*HelmContextRes, error)
	// DeleteContext 删除context
	DeleteContext(context.Context, *DeleteHelmContextReq) (*empty.Empty, error)
	// UpdateRepo 更新context 内repo 信息
	UpdateRepo(context.Context, *UpdateRepoReq) (*empty.Empty, error)
	// InstallRelease 安装charts
	InstallRelease(context.Context, *InstallReq) (*Release, error)
	// UpgradeRelease 更新release
	UpgradeRelease(context.Context, *UpgradeReq) (*Release, error)
	// UninstallRelease 删除release
	UninstallRelease(context.Context, *ReleaseReq) (*empty.Empty, error)
	// GetChart 获取 chart 信息
	GetChart(context.Context, *GetChartReq) (*Chart, error)
	// GetRelease 获取某个release实例信息
	GetRelease(context.Context, *ReleaseReq) (*Release, error)
	// GetReleaseValues 某个release实例values信息
	GetReleaseValues(context.Context, *ReleaseReq) (*Values, error)
	// ListRelease 列出某个context下全部release.
	ListRelease(context.Context, *ListReleaseReq) (*ListReleaseRes, error)
	// RollbackRelease 回滚某个release
	RollbackRelease(context.Context, *ReleaseRollbackReq) (*empty.Empty, error)
	// GetReleaseHistory 列出release 历史
	GetReleaseHistory(context.Context, *ReleaseReq) (*ListReleaseRes, error)
	// Search 查找某个repo的chart
	Search(context.Context, *SearchReq) (*SearchRes, error)
	// All 列出某个context所有的chart
	All(context.Context, *ListChartReq) (*SearchRes, error)
}

// UnimplementedHelmApiServiceServer can be embedded to have forward compatible implementations.
type UnimplementedHelmApiServiceServer struct {
}

func (*UnimplementedHelmApiServiceServer) CreateContext(context.Context, *HelmContextReq) (*HelmContextRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateContext not implemented")
}
func (*UnimplementedHelmApiServiceServer) DeleteContext(context.Context, *DeleteHelmContextReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteContext not implemented")
}
func (*UnimplementedHelmApiServiceServer) UpdateRepo(context.Context, *UpdateRepoReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRepo not implemented")
}
func (*UnimplementedHelmApiServiceServer) InstallRelease(context.Context, *InstallReq) (*Release, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstallRelease not implemented")
}
func (*UnimplementedHelmApiServiceServer) UpgradeRelease(context.Context, *UpgradeReq) (*Release, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeRelease not implemented")
}
func (*UnimplementedHelmApiServiceServer) UninstallRelease(context.Context, *ReleaseReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UninstallRelease not implemented")
}
func (*UnimplementedHelmApiServiceServer) GetChart(context.Context, *GetChartReq) (*Chart, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChart not implemented")
}
func (*UnimplementedHelmApiServiceServer) GetRelease(context.Context, *ReleaseReq) (*Release, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRelease not implemented")
}
func (*UnimplementedHelmApiServiceServer) GetReleaseValues(context.Context, *ReleaseReq) (*Values, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReleaseValues not implemented")
}
func (*UnimplementedHelmApiServiceServer) ListRelease(context.Context, *ListReleaseReq) (*ListReleaseRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRelease not implemented")
}
func (*UnimplementedHelmApiServiceServer) RollbackRelease(context.Context, *ReleaseRollbackReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RollbackRelease not implemented")
}
func (*UnimplementedHelmApiServiceServer) GetReleaseHistory(context.Context, *ReleaseReq) (*ListReleaseRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReleaseHistory not implemented")
}
func (*UnimplementedHelmApiServiceServer) Search(context.Context, *SearchReq) (*SearchRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (*UnimplementedHelmApiServiceServer) All(context.Context, *ListChartReq) (*SearchRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method All not implemented")
}

func RegisterHelmApiServiceServer(s *grpc.Server, srv HelmApiServiceServer) {
	s.RegisterService(&_HelmApiService_serviceDesc, srv)
}

func _HelmApiService_CreateContext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelmContextReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelmApiServiceServer).CreateContext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helmapi.HelmApiService/CreateContext",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelmApiServiceServer).CreateContext(ctx, req.(*HelmContextReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelmApiService_DeleteContext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHelmContextReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelmApiServiceServer).DeleteContext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helmapi.HelmApiService/DeleteContext",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelmApiServiceServer).DeleteContext(ctx, req.(*DeleteHelmContextReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelmApiService_UpdateRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRepoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelmApiServiceServer).UpdateRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helmapi.HelmApiService/UpdateRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelmApiServiceServer).UpdateRepo(ctx, req.(*UpdateRepoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelmApiService_InstallRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstallReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelmApiServiceServer).InstallRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helmapi.HelmApiService/InstallRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelmApiServiceServer).InstallRelease(ctx, req.(*InstallReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelmApiService_UpgradeRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelmApiServiceServer).UpgradeRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helmapi.HelmApiService/UpgradeRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelmApiServiceServer).UpgradeRelease(ctx, req.(*UpgradeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelmApiService_UninstallRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelmApiServiceServer).UninstallRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helmapi.HelmApiService/UninstallRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelmApiServiceServer).UninstallRelease(ctx, req.(*ReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelmApiService_GetChart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelmApiServiceServer).GetChart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helmapi.HelmApiService/GetChart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelmApiServiceServer).GetChart(ctx, req.(*GetChartReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelmApiService_GetRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelmApiServiceServer).GetRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helmapi.HelmApiService/GetRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelmApiServiceServer).GetRelease(ctx, req.(*ReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelmApiService_GetReleaseValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelmApiServiceServer).GetReleaseValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helmapi.HelmApiService/GetReleaseValues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelmApiServiceServer).GetReleaseValues(ctx, req.(*ReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelmApiService_ListRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelmApiServiceServer).ListRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helmapi.HelmApiService/ListRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelmApiServiceServer).ListRelease(ctx, req.(*ListReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelmApiService_RollbackRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseRollbackReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelmApiServiceServer).RollbackRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helmapi.HelmApiService/RollbackRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelmApiServiceServer).RollbackRelease(ctx, req.(*ReleaseRollbackReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelmApiService_GetReleaseHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelmApiServiceServer).GetReleaseHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helmapi.HelmApiService/GetReleaseHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelmApiServiceServer).GetReleaseHistory(ctx, req.(*ReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelmApiService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelmApiServiceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helmapi.HelmApiService/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelmApiServiceServer).Search(ctx, req.(*SearchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelmApiService_All_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelmApiServiceServer).All(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helmapi.HelmApiService/All",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelmApiServiceServer).All(ctx, req.(*ListChartReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _HelmApiService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "helmapi.HelmApiService",
	HandlerType: (*HelmApiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateContext",
			Handler:    _HelmApiService_CreateContext_Handler,
		},
		{
			MethodName: "DeleteContext",
			Handler:    _HelmApiService_DeleteContext_Handler,
		},
		{
			MethodName: "UpdateRepo",
			Handler:    _HelmApiService_UpdateRepo_Handler,
		},
		{
			MethodName: "InstallRelease",
			Handler:    _HelmApiService_InstallRelease_Handler,
		},
		{
			MethodName: "UpgradeRelease",
			Handler:    _HelmApiService_UpgradeRelease_Handler,
		},
		{
			MethodName: "UninstallRelease",
			Handler:    _HelmApiService_UninstallRelease_Handler,
		},
		{
			MethodName: "GetChart",
			Handler:    _HelmApiService_GetChart_Handler,
		},
		{
			MethodName: "GetRelease",
			Handler:    _HelmApiService_GetRelease_Handler,
		},
		{
			MethodName: "GetReleaseValues",
			Handler:    _HelmApiService_GetReleaseValues_Handler,
		},
		{
			MethodName: "ListRelease",
			Handler:    _HelmApiService_ListRelease_Handler,
		},
		{
			MethodName: "RollbackRelease",
			Handler:    _HelmApiService_RollbackRelease_Handler,
		},
		{
			MethodName: "GetReleaseHistory",
			Handler:    _HelmApiService_GetReleaseHistory_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _HelmApiService_Search_Handler,
		},
		{
			MethodName: "All",
			Handler:    _HelmApiService_All_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "helm-api.proto",
}
